/**
 * Flowtype definitions for index
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.8.2
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */
declare module "axios" {
declare export interface AxiosTransformer {
  (data: any, headers?: any): any;
}
declare export interface AxiosAdapter {
  (config: AxiosRequestConfig): AxiosPromise<any>;
}
declare export interface AxiosBasicCredentials {
  username: string;
  password: string;
}
declare export interface AxiosProxyConfig {
  host: string;
  port: number;
  auth?: {
    username: string,
    password: string
  };
}
declare export interface AxiosRequestConfig {
  url?: string;
  method?: string;
  baseURL?: string;
  transformRequest?: AxiosTransformer | AxiosTransformer[];
  transformResponse?: AxiosTransformer | AxiosTransformer[];
  headers?: any;
  params?: any;
  paramsSerializer?: (params: any) => string;
  data?: any;
  timeout?: number;
  withCredentials?: boolean;
  adapter?: AxiosAdapter;
  auth?: AxiosBasicCredentials;
  responseType?: string;
  xsrfCookieName?: string;
  xsrfHeaderName?: string;
  onUploadProgress?: (progressEvent: any) => void;
  onDownloadProgress?: (progressEvent: any) => void;
  maxContentLength?: number;
  validateStatus?: (status: number) => boolean;
  maxRedirects?: number;
  httpAgent?: any;
  httpsAgent?: any;
  proxy?: AxiosProxyConfig | false;
  cancelToken?: CancelToken;
}
declare export interface AxiosResponse<T = any> {
  data: T;
  status: number;
  statusText: string;
  headers: any;
  config: AxiosRequestConfig;
  request?: any;
}
declare export type AxiosError = {
  config: AxiosRequestConfig,
  code?: string,
  request?: any,
  response?: AxiosResponse<>
} & Error;
declare export type AxiosPromise<T = any> = {} & Promise<AxiosResponse<T>>;
declare export interface CancelStatic {
  new(message?: string): Cancel;
}
declare export interface Cancel {
  message: string;
}
declare export interface Canceler {
  (message?: string): void;
}
declare export interface CancelTokenStatic {
  new(executor: (cancel: Canceler) => void): CancelToken;
  source(): CancelTokenSource;
}
declare export interface CancelToken {
  promise: Promise<Cancel>;
  reason?: Cancel;
  throwIfRequested(): void;
}
declare export interface CancelTokenSource {
  token: CancelToken;
  cancel: Canceler;
}
declare export interface AxiosInterceptorManager<V> {
  use(
    onFulfilled?: (value: V) => V | Promise<V>,
    onRejected?: (error: any) => any
  ): number;
  eject(id: number): void;
}
declare export interface AxiosInstance {
  (config: AxiosRequestConfig): AxiosPromise<>;
  (url: string, config?: AxiosRequestConfig): AxiosPromise<>;
  defaults: AxiosRequestConfig;
  interceptors: {
    request: AxiosInterceptorManager<AxiosRequestConfig>,
    response: AxiosInterceptorManager<AxiosResponse<>>
  };
  request<T>(config: AxiosRequestConfig): AxiosPromise<T>;
  get<T>(url: string, config?: AxiosRequestConfig): AxiosPromise<T>;
  delete(url: string, config?: AxiosRequestConfig): AxiosPromise<>;
  head(url: string, config?: AxiosRequestConfig): AxiosPromise<>;
  post<T>(
    url: string,
    data?: any,
    config?: AxiosRequestConfig
  ): AxiosPromise<T>;
  put<T>(url: string, data?: any, config?: AxiosRequestConfig): AxiosPromise<T>;
  patch<T>(
    url: string,
    data?: any,
    config?: AxiosRequestConfig
  ): AxiosPromise<T>;
}
declare export type AxiosStatic = {
  create(config?: AxiosRequestConfig): AxiosInstance,
  Cancel: CancelStatic,
  CancelToken: CancelTokenStatic,
  isCancel(value: any): boolean,
  all<T>(values: (T | Promise<T>)[]): Promise<T[]>,
  spread<T, R>(callback: (...args: T[]) => R): (array: T[]) => R
} & AxiosInstance;
declare var Axios: AxiosStatic;
declare export default AxiosStatic;
}
